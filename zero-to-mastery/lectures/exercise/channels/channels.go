//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//

package main

import (
	"fmt"
	"log"
)
import "time"
import "math/rand"

type Job int

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs() []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}

func runJob(resultsChan chan int, job Job) {
	resultsChan <- longCalculation(job)
}

func main() {
	rand.Seed(time.Now().UnixNano())
	jobs := makeJobs()

	total := 0

	//* The result from `longCalculation` must be provided to the main function
	//  using a channel
	resultsChan := make(chan int, 1)
	resultsCount := 0

	//--Requirements:
	//* Run `longCalculation` for each job generated by the `makeJobs` function
	for _, job := range jobs {
		//* Each job must be run in a separate goroutine
		go runJob(resultsChan, job)
	}

	//for {
	//	select {
	//	case result := <-resultsChan:
	//		total += result
	//		resultsCount += 1
	//	case <-time.After(500 * time.Millisecond):
	//		if resultsCount >= len(jobs) {
	//			log.Printf("End of resultsChan, total is %v\n", total)
	//			return
	//		}
	//	}
	//}

	// Or more simply
	for {
		result := <-resultsChan
		total += result
		resultsCount += 1
		if resultsCount >= len(jobs) {
			log.Printf("End of resultsChan, total is %v\n", total)
			break
		}
	}
}
